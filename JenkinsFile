pipeline {
    agent any 

    environment {
        IMAGE_NAME = "konda33/hal_mitra"
        K8S_REPO = "https://github.com/ikonda-gosala/k8s.git"
        K8S_BRANCH = "main"
        K8S_DIR = "k8s"
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                git branch: 'main', url: 'https://github.com/ikonda-gosala/hal_mitra.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withDockerRegistry([credentialsId: 'dockerhub-creds', url: '']) {
                    script {
                        docker.image("${IMAGE_NAME}").push()
                    }
                }
            }
        }

        stage('Deploy to Minikube') {
            environment {
                MINIKUBE_HOST = "54.175.240.99"
            }
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'minikube-ssh', keyFileVariable: 'SSH_KEY')]) {
                    script {
                        writeFile file: 'deploy.sh', text: """
                            #!/bin/bash
                            set -e
                            if [ ! -d ${K8S_DIR} ]; then
                                git clone ${K8S_REPO}
                            else
                                cd ${K8S_DIR} && git pull && cd ..
                            fi
                            cd ${K8S_DIR}
                            kubectl apply -f deployment.yaml
                            kubectl apply -f service.yaml
                        """
                        sh """
                            scp -o StrictHostKeyChecking=no -i \$SSH_KEY deploy.sh ec2-user@\$MINIKUBE_HOST:/tmp/deploy.sh
                            ssh -o StrictHostKeyChecking=no -i \$SSH_KEY ec2-user@\$MINIKUBE_HOST 'bash /tmp/deploy.sh'
                        """
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh 'docker rmi ${IMAGE_NAME}'
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f'
        }
    }
}
