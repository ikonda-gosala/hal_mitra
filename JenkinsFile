pipeline {
    agent any 

    environment {
        IMAGE_NAME = "konda33/hal_mitra"
        K8S_REPO = "https://github.com/ikonda-gosala/k8s.git"
        K8S_DIR = "k8s"
        MINIKUBE_HOST = "54.175.240.99"
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                git branch: 'main', url: 'https://github.com/ikonda-gosala/hal_mitra.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withDockerRegistry([credentialsId: 'dockerhub-creds', url: '']) {
                    script {
                        docker.image("${IMAGE_NAME}").push()
                    }
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'minikube-ssh', keyFileVariable: 'SSH_KEY')]) {
                    // Clone or pull the repo
                    sh "ssh -o StrictHostKeyChecking=no -i \$SSH_KEY ec2-user@${MINIKUBE_HOST} 'if [ ! -d ${K8S_DIR} ]; then git clone ${K8S_REPO}; else cd ${K8S_DIR} && git pull; fi'"

                    // Apply deployment
                    sh "ssh -o StrictHostKeyChecking=no -i \$SSH_KEY ec2-user@${MINIKUBE_HOST} 'cd ${K8S_DIR} && kubectl apply -f deployment.yaml'"

                    // Apply service
                    sh "ssh -o StrictHostKeyChecking=no -i \$SSH_KEY ec2-user@${MINIKUBE_HOST} 'cd ${K8S_DIR} && kubectl apply -f service.yaml'"
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh "docker rmi ${IMAGE_NAME}"
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f'
        }
    }
}
